AWSTemplateFormatVersion: "2010-09-09"
Description: "Hello API (Lambda + API Gateway HTTP API) + Image Upload Bucket"

Resources:

  # 画像アップロード専用のS3バケットを新規作成
  # 静的サイト用とは別のバケットで、セキュリティと管理を分離
  ImageUploadBucket:
    Type: AWS::S3::Bucket
    Properties:
      # パブリックアクセスを完全にブロック（署名付きURLで制御）
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true
      # CORS設定：フロントエンドからの直接アップロードを許可
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins: ["*"]  # 本番では特定ドメインに制限推奨
            AllowedMethods: [PUT, POST]  # アップロード用メソッド
            AllowedHeaders: ["*"]

  # Lambda関数用のIAMロールを作成
  HelloLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              # Lambda サービスのみが使用可能
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      # 追加：S3への書き込み権限を付与
      Policies:
        - PolicyName: S3UploadPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject      # オブジェクトアップロード
                  - s3:PutObjectAcl   # アクセス制御設定
                Resource: !Sub "${ImageUploadBucket}/*"  # 画像バケット内のみ

  HelloLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: HelloLambda
      Runtime: nodejs20.x
      Handler: index.handler
      Role: !GetAtt HelloLambdaRole.Arn
      # 環境変数：Lambdaコード内で使用するAWS設定
      Environment:
        Variables:
          AWS_REGION: !Ref AWS::Region          # 現在のリージョン
          BUCKET_NAME: !Ref ImageUploadBucket   # 作成した画像バケット名
      
      # Code.ZipFile は「CloudFormation で Lambda を作成する際に必須」のため残しているだけです。
      # 実際のコードは GitHub Actions (update-function-code) により毎回上書きされます。
      # したがって、この ZipFile の処理は通常は使われません（初回作成用のダミー）。
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            return { statusCode: 200, headers: { "Content-Type":"application/json" }, body: JSON.stringify({ message: "hello" }) };
          };

  # API Gateway HTTP API を作成
  HelloApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: HelloApi
      ProtocolType: HTTP
      # CORS 設定：POSTメソッドも追加
      CorsConfiguration:
        AllowOrigins: ["*"]
        AllowMethods: ["GET", "POST"]  # GETとPOSTの両方を許可
        AllowHeaders: ["*"]

  # API Gateway と Lambda を接続
  HelloIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HelloApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloLambda.Arn}/invocations
      PayloadFormatVersion: "2.0"

  # 既存のhelloエンドポイント（GET /hello）
  HelloRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HelloApi
      RouteKey: "GET /hello"
      Target: !Sub "integrations/${HelloIntegration}"

  # 新規追加：画像アップロード用エンドポイント（POST /upload）
  # 署名付きURL生成用
  UploadRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HelloApi
      RouteKey: "POST /upload"
      Target: !Sub "integrations/${HelloIntegration}"

  # Lambda 関数を API Gateway から呼び出す権限を付与
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref HelloLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com

  # API Gateway のデフォルトステージを作成
  HelloStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: "$default"
      AutoDeploy: true
      ApiId: !Ref HelloApi

Outputs:
  ApiEndpoint:
    Description: "Invoke URL"
    Value: !Sub "https://${HelloApi}.execute-api.${AWS::Region}.amazonaws.com"
  
  # 新規追加：画像バケット名を出力（デバッグ用）
  ImageBucketName:
    Description: "Image upload bucket name"
    Value: !Ref ImageUploadBucket