# https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/template-anatomy.html

AWSTemplateFormatVersion: "2010-09-09"
Description: "contact-s3cf-lambda minimal stack (Lambda + HTTP API)"

Parameters:
  ProjectName:
    Type: String
    Default: "contact"
  Stage:
    Type: String
    Default: "dev"
  CodeBucket:
    Type: String
    Description: "S3 bucket name that stores the Lambda zip"
  CodeKey:
    Type: String
    Description: "S3 object key (path) for the Lambda zip"
  AllowedOrigins:
    Type: String
    Default: "*"
    Description: "CORS allowed origins (comma-separated or *). Example: https://example.com"

Resources:
  # --- Lambda 実行ロール（最小：CloudWatch Logs出力） ---
  ContactLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-${Stage}-contact-lambda-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: { Service: lambda.amazonaws.com }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # --- ログ（保存期間は任意で短め） ---
  ContactLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ProjectName}-${Stage}-contact"
      RetentionInDays: 14

  # --- Lambda 本体（Node.js 20 / ESM） ---
  ContactFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-${Stage}-contact"
      Role: !GetAtt ContactLambdaRole.Arn
      Runtime: nodejs20.x
      Handler: index.handler               # dist/index.mjs の export const handler
      Timeout: 10
      MemorySize: 128
      Architectures: [ arm64 ]             # x86_64 でも可
      Code:
        S3Bucket: !Ref CodeBucket
        S3Key: !Ref CodeKey
    DependsOn:
      - ContactLogGroup

  # --- HTTP API（API Gateway v2） ---
  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub "${ProjectName}-${Stage}-api"
      ProtocolType: HTTP
      CorsConfiguration:
        AllowOrigins: 
          # カンマ区切りにも対応：テンプレで1つに見えるが、複数指定は後で変更可
          - !Ref AllowedOrigins
        AllowMethods: ["POST", "OPTIONS"]
        AllowHeaders: ["Content-Type"]

  # Lambda と結線（AWS_PROXY）
  HttpApiIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationMethod: POST
      PayloadFormatVersion: "2.0"
      IntegrationUri: !Sub >
        arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ContactFunction.Arn}/invocations

  # ルート：POST /submit
  HttpApiRouteSubmit:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: "POST /submit"
      Target: !Sub "integrations/${HttpApiIntegration}"

  # ステージ（/dev 等） 自動デプロイ
  HttpApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref HttpApi
      StageName: !Ref Stage
      AutoDeploy: true

  # API → Lambda 呼び出し権限
  AllowInvokeFromApi:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ContactFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*/POST/submit"

Outputs:
  ContactFunctionArn:
    Value: !GetAtt ContactFunction.Arn
  ContactFunctionName:
    Value: !Ref ContactFunction

  HttpApiId:
    Value: !Ref HttpApi
  HttpApiBaseUrl:
    Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com"
  SubmitEndpoint:
    Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/submit"
